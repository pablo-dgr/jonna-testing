vm:
vm-jonna-testing

user:
azureuser

connect:
ssh -i C:\Users\pdgr\Downloads\jonna-testing\vm-jonna-testing_key.pem azureuser@51.144.228.126
ssh -i "C:/Users/pdgr/Downloads/jonna-testingvm-jonna-testing_key.pem" azureuser@51.144.228.126

Wasmcloud setup:
https://wasmcloud.com/docs/tour/hello-world/

-- install wash --

1. update apt registry:
curl -s https://packagecloud.io/install/repositories/wasmcloud/core/script.deb.sh | sudo bash

2. install wash
sudo apt install wash

3. test run wash
wash --version

--- setting up NPM / Typescript ---

1. install nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash

1.2 avoid having to start new session
\. "$HOME/.nvm/nvm.sh"

2. install node.js v22 (LTS)
nvm install 22

3. check node.js version
node -v

4. install typescript
npm install -g typescript

5. check Typescript version
tesc -v

--- creating a wash component ---

1. setup component project
wash new component hello --template-name hello-world-typescript

2. navigate to project dir and install NPM packages
cd hello
npm install

3. local dev loop:
wash dev

4. test the locally running component:
curl localhost:8000

5. make a smol change (edit hello/src/http-hello-world.ts) + save

6. test your change
curl localhost:8000

--- adding functionality ---

1. add name retrieval from req query string
	(edit hello/src/http-hello-world.ts) + save

2. test
curl localhost:8000?name=Pablo

3. add persistent storage of names
	(edit hello/wit/world.wit) + save
	
4. add bucket retrieval + incrementing
	(edit hello/src/http-hello-world.ts) + save

5. test (should increment counter in response)
curl localhost:8000?name=Pablo
curl localhost:8000?name=Pablo
curl localhost:8000?name=Pablo

--- customize and extend ---

1. check available capabilities:
https://wasmcloud.com/docs/capabilities/

	--> note: not a lot of options (yet)

2. Chosing a capability provider ourselves
	--> switch from NATS to Redis
	
3.a install Redis server?
	--> Nope, docs link no longer exists :)
	
3.b run redis in a docker image

	i. install docker
	
		sudo apt-get update
		sudo apt-get install ca-certificates curl
		sudo install -m 0755 -d /etc/apt/keyrings
		sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
		sudo chmod a+r /etc/apt/keyrings/docker.asc

		# Add the repository to Apt sources:
		echo \
		  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
		  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
		  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
		sudo apt-get update
	
		sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

		sudo docker run hello-world
	
	ii. start up the redis docker image:
	
		first to avoid any permission denied errors:
			sudo usermod -aG docker $USER
			newgrp docker

		then:
		docker run -d --name redis -p 6379:6379 redis
		

4. use the new provider (which is now running in docker)
	(edit hello/wasmcloud.toml) + save

5. wash dev will redeploy

6. test (notice: counter will restart, because we started from scratch with redis)
http://127.0.0.1:8000/?name=Pablo
http://127.0.0.1:8000/?name=Pablo

7. stopping the dev setup:
ctrl + c on wash dev
docker stop redis

--- deploy and scale ---

1. setup wadm.yaml
	(wadm = wasmcloud application deployment manager)
	(https://wasmcloud.com/docs/ecosystem/wadm/)

	edit hello/local.wadm.yaml + save
	
2. scaling up

	edit hello/src/http-hello-world.ts to add a sleep (to simulate bottleneck)
	
	manual build and spin up wash:
	
	a. wash build
	b. wash up -d

	deploy locally using the wadm.yaml:
	
	a. wash app deploy local.wadm.yaml
	
	test the bottleneck:
	
	a. seq 1 10 | xargs -P0 -I {} curl --max-time 3 "localhost:8000?name=Alice"
	b. timeouts!
	
	edit hello/local.wadm.yaml + save
	
	redeploy app:
	a. wash down
	b. wash up -d
	c. wash build
	d. wash app deploy local.wadm.yaml
	
	re-test bottleneck:
	a. seq 1 10 | xargs -P0 -I {} curl --max-time 3 "localhost:8000?name=Alice"
	b. no timeouts!
	
3. cleanup:
	
	a. wash app delete typescript-hello-world
	b. wash down
	c. docker stop redis
	
4. distrib globally:

	distrib accross regions using 'lattice'
	(https://wasmcloud.com/docs/concepts/lattice/)
	
	update hello/local.wadm.yaml + save
	
	the zone requirements in the newly added 'spread' in wadm.yaml matches hosts based on their labels
	our 'local' host doesn't have any labels yet.. so let's set some up..
	
	a. wash up --multi-local --label zone=us-east-1 -d
	b. wash up --multi-local --label zone=us-west-1 -d
	
	deploy app again:
	wash build
	wash app deploy local.wadm.yaml
	
	view hosts and components using:
	wash get inventory
	
5. view wasmcloud dashboard
	wash ui
	
	open dashboard in browser:
	http://localhost:3030/


--- wasmcloud operator for kubernetes ---

(https://wasmcloud.com/docs/kubernetes/)

See git repo: https://github.com/wasmCloud/wasmcloud-operator

Video recap:

They added an examples folder with a quickstart: https://github.com/wasmCloud/wasmcloud-operator/tree/main/examples/quickstart
Shows how to set up wasmcloud operator in a brand new kubernetes cluster

Using 'helm':

1. setup NATS (https://wasmcloud.com/docs/ecosystem/nats/) in the cluster
2. setup WADM (https://wasmcloud.com/docs/ecosystem/wadm/) in the cluster
3. setup wasmcloud operator in the cluster
	--> then we can install our wasmcloud apps

4. setup a wasmcloud host in the cluster (using yaml file)

5. now you can deploy apps with their wadl.yaml configs without having to use 'wash', instead using 'kubectl apply -f xxxx.yml'

More info in: https://wasmcloud.com/docs/kubernetes/#how-we-run-webassembly-on-kubernetes

Important note: 
kubernetes = infrastructure level (manages the hosts)
wasmcloud = application level (manages the components, providers, ..)
