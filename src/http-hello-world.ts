import {
  IncomingRequest,
  ResponseOutparam,
  OutgoingBody,
  OutgoingResponse,
  Fields,
} from 'wasi:http/types@0.2.3';

//@ts-expect-error -- these types aren't currently generated by JCO
import { log } from 'wasi:logging/logging@0.1.0-draft';
//@ts-expect-error -- these types aren't currently generated by JCO
import { increment } from 'wasi:keyvalue/atomics@0.2.0-draft';
// @ts-expect-error -- these types aren't currently generated by JCO
import { open } from 'wasi:keyvalue/store@0.2.0-draft';

// Implementation of wasi-http incoming-handler
//
// NOTE: To understand the types involved, take a look at wit/deps/http/types.wit
async function handle(req: IncomingRequest, resp: ResponseOutparam) {
  // Start building an outgoing response
  const outgoingResponse = new OutgoingResponse(new Fields());

  // Access the outgoing response body
  let outgoingBody = outgoingResponse.body();
  {
    // Create a stream for the response body
    let outputStream = outgoingBody.write();

    const nameFromQueryString = getNameFromPath(req.pathWithQuery() || "");

    log("info", "", `Greeting ${nameFromQueryString}`);

    // simulate bottleneck:
    const sleepTime = 2000;

    await new Promise(resolve => setTimeout(resolve, sleepTime));
    log("info", "", `Sleeping for ${sleepTime} to simulate a bottleneck`);
    const bucket = open("default");
    const greetCount = increment(bucket, nameFromQueryString, 1);

    // Write hello world to the response stream
    outputStream.blockingWriteAndFlush(
      new Uint8Array(new TextEncoder().encode(`Hello x${greetCount} ${nameFromQueryString}!\n`))
    );
    // @ts-ignore: This is required in order to dispose the stream before we return
    outputStream[Symbol.dispose]();
  }

  // Set the status code for the response
  outgoingResponse.setStatusCode(200);
  // Finish the response body
  OutgoingBody.finish(outgoingBody, undefined);
  // Set the created response
  ResponseOutparam.set(resp, { tag: 'ok', val: outgoingResponse });
}

function getNameFromPath(path: string): string {
  const parts = path.split('=');
  if(parts.length == 2)
      return parts[1];
  else
    return "world";
}

export const incomingHandler = {
  handle,
};
